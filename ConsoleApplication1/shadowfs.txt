#version 150

in vec2 v_texcoord;
in vec3 v_worldPos;
in vec3 v_normal;

out vec4 color;

uniform vec4 lightPos;
uniform vec4 lightColor;
uniform vec3 eyePos;
uniform mat4 lightViewMatrix;
uniform mat4 lightProjMatrix;
uniform vec3 hitheryon;

uniform float scaleFactor;
uniform float magicConst;
uniform sampler2D shadowbuffer;
uniform sampler2D tex;
uniform sampler2D stex;

//get world space point
//pe = worldSpacePoint*light_viewMatrix;
//ps = worldSpacePoint*light_projMatrix;
//do homogenous divide
//map results x,y from -1...1 range to 0...1 range. (call this tc)
//fetch texel from the shadowbuffer texture at tc, call it t
	//remap from 0...1 to hither...yon
//if (-pe.z < 0 or -pe.z > t+0.005)
	//{		shadowed	}
//else {	not shadowed	}

void main() {
	
	vec3 N = normalize(v_normal);
	vec3 V = eyePos - v_worldPos;
	V = normalize(V);

	vec3 L = lightPos.xyz - v_worldPos;
	L = normalize(L);

	vec4 tmp = vec4(v_worldPos,1.0) * lightViewMatrix;
	float z1 = tmp.z;
	z1 = -z1;
	z1 = (z1-hitheryon[0]) / hitheryon[2];
	z1 *= scaleFactor;

	tmp = tmp*lightProjMatrix;
	tmp.xy /= tmp.w;
	tmp.xy = 0.5*(tmp.xy + vec2(1.0));

	float z2 = texture2D(shadowbuffer, tmp.xy).r;
	z2 = abs(z2);

	float c = magicConst;
	float litpct;
	litpct = exp(c*(z2-z1));
	litpct = clamp(litpct,0.0,1.0);

	float diffuseProduct = clamp( dot(L,N), 0.0, 1.0);
	vec4 diffuse = litpct * diffuseProduct*lightColor;
	vec4 texc = texture2D(tex, v_texcoord);
	color = diffuse * texc;

}