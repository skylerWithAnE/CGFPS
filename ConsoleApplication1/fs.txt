#version 150

uniform sampler2D tex;
uniform sampler2D etex;
uniform sampler2D stex;
uniform sampler2D ntex;
uniform vec3 lightPos;
uniform vec3 eyePos;

in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_tangent;
in vec3 v_worldPos;
in mat4 v_worldMatrix;

out vec4 color;

void main(){
    vec3 N = normalize(v_normal);
	vec4 q = texture(ntex, v_texcoord);
	q = (q - (1/2)) * 2;
	vec3 T = normalize(v_tangent);
	vec3 B = cross(N,T);
	mat3 Q = mat3(T.x, B.x, N.x, T.y, B.y, N.y, T.z, B.z, N.z);
	vec3 newNormal = q.rgb * Q;
	newNormal = normalize(newNormal);
	newNormal = (vec4(newNormal,0) * v_worldMatrix).xyz;
    vec3 L = normalize(lightPos - v_worldPos);
    vec3 V = normalize(eyePos - v_worldPos);
    vec3 R = reflect( -L,newNormal);
    float diffuse = clamp( dot(newNormal,L), 0.0, 1.0 );
    float specular = pow( max( 0.0, dot(V,R)) , 32.0 ); //hardcoded exponent
    specular *= sign(diffuse);  //no specular if no diffuse
    
    color = texture(tex,v_texcoord);
    color.rgb *= diffuse;
    color.rgb += specular * texture(stex,v_texcoord).rgb;
    //color.rgb += texture(etex,v_texcoord).rgb;
    
}